package node_test

import (
	"bytes"
	"encoding/gob"
	"encoding/json"
	"testing"

	"github.com/montaguethomas/acd-go/node"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_Node(t *testing.T) {

	t.Run("node can marshal and unmarshal", func(t *testing.T) {
		expectedJson := `{"id":"xxxx1","name":"myname","kind":"FILE","version":1,"modifiedDate":"0001-01-01T00:00:00Z","createdDate":"0001-01-01T00:00:00Z","properties":{"CloudDriveWeb":{"key1":"value1","key2":"value2"}},"contentProperties":{"contentDate":"0001-01-01T00:00:00Z"}}`
		originalNode := &node.Node{
			Id:      "xxxx1",
			Name:    "myname",
			Version: 1,
			Kind:    node.KindFile,
		}
		originalNodeProperty := node.NewProperty()
		originalNodeProperty.SetAll(map[string]string{
			"key1": "value1",
			"key2": "value2",
		})
		originalNode.SetOwnerProperties(originalNodeProperty)

		jsonBytes, err := json.Marshal(&originalNode)
		require.NoError(t, err)
		assert.Equal(t, expectedJson, string(jsonBytes))

		var node *node.Node
		err = json.Unmarshal(jsonBytes, &node)
		require.NoError(t, err)
		assert.Equal(t, originalNode, node)
		props, ok := node.GetOwnerProperties()
		assert.True(t, ok)
		assert.Equal(t, originalNodeProperty.GetAll(), props.GetAll())

		// Remarshal the node created from unmarshalling
		// This will ensure round trips work
		jsonBytes, err = json.Marshal(&node)
		require.NoError(t, err)
		assert.Equal(t, expectedJson, string(jsonBytes))
	})

	t.Run("node can gob encode and decode", func(t *testing.T) {
		expectedGobBytes := []byte{0xfe, 0x1, 0x12, 0x7f, 0x3, 0x1, 0x1, 0x4, 0x4e, 0x6f, 0x64, 0x65, 0x1, 0xff, 0x80, 0x0, 0x1, 0x13, 0x1, 0xc, 0x45, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1, 0xc, 0x0, 0x1, 0x2, 0x49, 0x64, 0x1, 0xc, 0x0, 0x1, 0x4, 0x4e, 0x61, 0x6d, 0x65, 0x1, 0xc, 0x0, 0x1, 0x4, 0x4b, 0x69, 0x6e, 0x64, 0x1, 0xc, 0x0, 0x1, 0x7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1, 0x6, 0x0, 0x1, 0xc, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x1, 0xff, 0x82, 0x0, 0x1, 0xb, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x1, 0xff, 0x82, 0x0, 0x1, 0x6, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1, 0xff, 0x84, 0x0, 0x1, 0xb, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1, 0xc, 0x0, 0x1, 0x9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x1, 0xc, 0x0, 0x1, 0x7, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x1, 0xff, 0x84, 0x0, 0x1, 0x6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1, 0xc, 0x0, 0x1, 0xa, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1, 0xff, 0x88, 0x0, 0x1, 0xa, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x1, 0x2, 0x0, 0x1, 0x6, 0x49, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x1, 0x2, 0x0, 0x1, 0x8, 0x49, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x1, 0x2, 0x0, 0x1, 0x8, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x1, 0xc, 0x0, 0x1, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1, 0xff, 0x8a, 0x0, 0x1, 0x5, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1, 0xff, 0x8c, 0x0, 0x0, 0x0, 0x10, 0xff, 0x81, 0x5, 0x1, 0x1, 0x4, 0x54, 0x69, 0x6d, 0x65, 0x1, 0xff, 0x82, 0x0, 0x0, 0x0, 0x16, 0xff, 0x83, 0x2, 0x1, 0x1, 0x8, 0x5b, 0x5d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1, 0xff, 0x84, 0x0, 0x1, 0xc, 0x0, 0x0, 0x2e, 0xff, 0x87, 0x4, 0x1, 0x1, 0x1d, 0x6d, 0x61, 0x70, 0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5d, 0x2a, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1, 0xff, 0x88, 0x0, 0x1, 0xc, 0x1, 0xff, 0x86, 0x0, 0x0, 0xa, 0xff, 0x85, 0x5, 0x1, 0x2, 0xff, 0x8e, 0x0, 0x0, 0x0, 0x6b, 0xff, 0x89, 0x3, 0x1, 0x1, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1, 0xff, 0x8a, 0x0, 0x1, 0x6, 0x1, 0x7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1, 0x6, 0x0, 0x1, 0x9, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x1, 0xc, 0x0, 0x1, 0x4, 0x53, 0x69, 0x7a, 0x65, 0x1, 0x6, 0x0, 0x1, 0x3, 0x4d, 0x44, 0x35, 0x1, 0xc, 0x0, 0x1, 0xb, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1, 0xc, 0x0, 0x1, 0xb, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x1, 0xff, 0x82, 0x0, 0x0, 0x0, 0x16, 0xff, 0x8b, 0x4, 0x1, 0x1, 0x5, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1, 0xff, 0x8c, 0x0, 0x1, 0xc, 0x1, 0xff, 0x80, 0x0, 0x0, 0x59, 0xff, 0x80, 0x2, 0x5, 0x78, 0x78, 0x78, 0x78, 0x31, 0x1, 0x6, 0x6d, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x1, 0x4, 0x46, 0x49, 0x4c, 0x45, 0x1, 0x1, 0x8, 0x1, 0xd, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x57, 0x65, 0x62, 0x2c, 0xe, 0xff, 0x8f, 0x4, 0x1, 0x2, 0xff, 0x90, 0x0, 0x1, 0xc, 0x1, 0xc, 0x0, 0x0, 0x1c, 0xff, 0x90, 0x0, 0x2, 0x4, 0x6b, 0x65, 0x79, 0x31, 0x6, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x4, 0x6b, 0x65, 0x79, 0x32, 0x6, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x5, 0x0, 0x0}
		originalNode := &node.Node{
			Id:      "xxxx1",
			Name:    "myname",
			Version: 1,
			Kind:    node.KindFile,
		}
		originalNodeProperty := node.NewProperty()
		originalNodeProperty.SetAll(map[string]string{
			"key1": "value1",
			"key2": "value2",
		})
		originalNode.SetOwnerProperties(originalNodeProperty)

		buf := bytes.NewBuffer([]byte{})
		err := gob.NewEncoder(buf).Encode(&originalNode)
		gobBytes := buf.Bytes()
		require.NoError(t, err)
		assert.Equal(t, expectedGobBytes, gobBytes)

		var node *node.Node
		buf = bytes.NewBuffer(gobBytes)
		err = gob.NewDecoder(buf).Decode(&node)
		require.NoError(t, err)
		assert.Equal(t, originalNode, node)
		props, ok := node.GetOwnerProperties()
		assert.True(t, ok)
		assert.Equal(t, originalNodeProperty.GetAll(), props.GetAll())
	})

}
